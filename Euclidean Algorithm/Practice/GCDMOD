//upsolve
#include<bits/stdc++.h>
using namespace std;
#define ll long long
const ll int mod=1e9+7;


/*


pre: modular arithmetic, binary exponentiation,prime factorization 

logic:  

if we need to calculate the gcd(x,y) where x is too large and y is small then we find gcd candidates and apply modulo arithmetic to solve

in this problem a ^n+b^n cant be calculate togther so we apply modular aritmetic on addition to solve

gcd candidates: factors of the number y (smaller one)

the maximum factor that divides the number x will be our ans 


things learnt:
* use of modular arithmetic to find divisiblity 
* use of gcd concepts




*/


ll int binexpo(ll int a,ll int b,ll int m)
{
	a%=m;
	ll int ans=1;
	while(b>0){
		if(b&1)
		ans=((ans%m)*(a%m))%m;
		a=((a%m)*(a%m))%m;
		b>>=1;
	}
	
	return ans%m;
}

ll int modgcd(ll int a,ll int b,ll int n)
{
	//a==b then ans = (a^n%mod +b^n%mod)%mod;
	if(a==b)
	return (binexpo(a,n,mod)+binexpo(b,n,mod))%mod;
	ll int t=1;
	ll int num=a-b;
	
	//factors
	
	for(ll int i=1;i*i<=num;i++)
	{
		//factor of y found then lets check for x if it divides
		if(num%i==0)
		{
			ll int check=(binexpo(a,n,i)+binexpo(b,n,i))%i;
			if(check==0)
			t=max(t,i);
			//if num%i==0 then num%(num/i)==0
			check=(binexpo(a,n,num/i)+binexpo(b,n,num/i))%(num/i);
			if(check==0)
			t=max(t,num/i);
		}
		
	}
	
	return t%mod;
	
}


int main()
{	
     int t;
     cin>>t;
     while(t--)
     {
     	
       ll int a,b,n;
	   cin>>a>>b>>n;
	   cout<<modgcd(a,b,n)<<endl;
	        		
	 }
	
	
	return 0;
	
}
